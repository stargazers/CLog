CLog
====

	Description:
		Class for logging.

	License:
		GNU AGPL

	Author:
		Aleksi Räsänen, 2011
		aleksi.rasanen@runosydan.net

	Example:

		require 'CLog/CLog.php';

		$log = new CLog();
		$log->addLineNumbers( true );
		$log->setFileWhatWeLog( 'test.php' );

		$log->add( 'In method: Testing...' );
		$log->add( 'This is the first line' );
		$log->add( 'And this is second line' );
		$log->add( 'Third line here!' );
		$log->add( 'In method: This is method!' );

		$log->setMessageType( 'in_method', '^In method' );

		$log->writeLogToFile( 'log.txt', 'text' );
		$log->writeLogToFile( 'log.html', 'html' );

		print_r( $log->getLog( 'raw' ) );

	In above example we have defined a message type 'in_method'
	and all lines which fits to regular expression ^In method
	will get that message type (in_method). When we generate a
	HTML log from that we have those messages with different 
	CSS class. CSS class name would be log_message_in_method
	so we can no define different messagetypes and we can get
	different CSS classes for those messages.

	Example 2:
		require 'CLog/CLog.php';

		$log = new CLog();
		$log->setFileWhatWeLog( 'test.php' );
		$log->add( 'Hello...' );
		$log->add( '...World!');
		echo $log->getLog( 'text' );
		$log->clearLog();

		$log->showFilenameInLog( false );
		$log->add( 'In this message...' );
		$log->add( '...and this...');
		$log->add( 'there is no filename in log output!' );
		echo $log->getLog( 'text' );

 	Above example would create this kind of log (of course date and 
	timestamps will be different depending on date and time...):

		2012-02-15 19:18:09  ---  test.php : Hello...
		2012-02-15 19:18:09  ---  test.php : ...World!
		2012-02-15 19:18:09  ---  In this message...
		2012-02-15 19:18:09  ---  ...and this...
		2012-02-15 19:18:09  ---  there is no filename in log output!

